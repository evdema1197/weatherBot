from aiogram import Bot, Dispatcher,executor, types
from config import TOKEN_API, WEATHER_TOKEN
from pprint import pprint
import datetime
import requests

bot= Bot(token=TOKEN_API)
dp= Dispatcher(bot)

@dp.message_handler(commands=["start"])
async def start_command(message: types.Message):
    await message.reply("–ü—Ä–∏–≤–µ—Ç! –ù–∞–ø–∏—à–∏ –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–≤–æ–µ–≥–æ –≥–æ—Ä–æ–¥–∞!")

@dp.message_handler()
async def get_weather(message: types.Message):
    weather_emodji={
		"Clear": "–Ø—Å–Ω–æ \U00002600",
		"Clouds": "–û–±–ª–∞—á–Ω–æ \U00002601",
		"Rain": "–î–æ–∂–¥—å \U00002614",
		"Drizzle": "–î–æ–∂–¥—å \U00002614",
		"Thunderstorm": "–ì—Ä–æ–∑–∞ \U000026A1",
		"Snow": "–°–Ω–µ–≥ \U0001F328"
		}
    try:
        r_lat_lon = requests.get(
			f'http://api.openweathermap.org/geo/1.0/direct?q={message.text}&limit=1&appid={WEATHER_TOKEN}'
			)
        data = r_lat_lon.json()
        lat = data[0]["lat"]
        lon = data[0]["lon"]
        r = requests.get(
			f"https://api.openweathermap.org/data/2.5/weather?lat={lat}&lon={lon}&units=metric&lang=ru&appid={WEATHER_TOKEN}"
		)
        weather_data=r.json()

        name=weather_data["name"]
        feels_like=weather_data["main"]["feels_like"]
        temp=weather_data["main"]["temp"]
        pressure=weather_data["main"]["pressure"]
        humidity=weather_data["main"]["humidity"]
        wind_speed = weather_data["wind"]["speed"]
        sunrise=datetime.datetime.fromtimestamp((weather_data["sys"]["sunrise"]))

        weather_descrition=weather_data["weather"][0]["main"]
        if  weather_descrition in weather_emodji:
            wd = weather_emodji[weather_descrition]
        else:
            wd=" "

        await message.reply(f"–ü–æ–≥–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥–µ: {name} {wd}\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp} ¬∞C\n"
		f"–û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: {feels_like} ¬∞–°\n–í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity} %\n"
		f"–î–∞–≤–ª–µ–Ω–∏–µ: {pressure} \n–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: {wind_speed} –º/c\n"
		f"–í–æ—Å—Ö–æ–¥ —Å–æ–ª–Ω—Ü–∞: {sunrise}\n"
		f"–•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è üß°"
		)
    except Exception as ex:
        await message.reply(ex)
        await message.reply("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞")

if __name__== '__main__':
    executor.start_polling(dp,skip_updates=True)